version: "3.2"

services:

  postgres:
    container_name: postgres
    image: 'postgres:15'
    #Â If this condition is met, the container will be considered healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=${POSTGRES_DB} --username=${POSTGRES_USER}"]
      interval: 5s
      start_period: 1s
    restart: always  # https://serverfault.com/questions/884759/how-does-restart-always-policy-work-in-docker-compose
    volumes:
      - './postgres/data:/var/lib/postgresql/data'
    env_file:
      - ./.env
    # This would let us connect directly without having to connect to the docker container
    # ports:
    #   - '5432:5432'

  webserver:
    # This container name is really useful to identify the service in the docker network,
    # but in our case, since we are adding replicas for this service, this will make all replicas try
    # to have the same name, which is breaking the docker-compose up command.
    # container_name: webserver
    image: webserver
    # This should point to the place where this is defined in the dockerfiles
    # If this had an independent Dockerfile, we wouldn't need a target
    build:
      context: ./
      target: go_webserver
    command: go run ./src/main/
    # This will make sure this container will wait until postgres
    # container is up and its healthcheck condition is met
    depends_on:
      postgres:
        condition: service_healthy
    # These volumes are useful since all the changes done in
    # the source files will be automatically applied to the built containers
    volumes:
      - ./webserver/src:/app/src
      - ./webserver/bin:/app/bin
      - ./webserver/db_migrations:/app/db_migrations
      - ./.env:/app/.env
    # These replicas will allow us to have 2 running containers for this service, this will allow us to test
    # load balancing behaviors.
    deploy:
      replicas: 2
    # This would let us send requests directly without having to connect to the docker container
    # ports:
    #   - "80:8080"

  nginx:
    container_name: nginx
    image: nginx_custom
    build:
      context: ./
      target: nginx_custom
    depends_on:
      - "webserver"
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/html/:/usr/share/nginx/html

  python_tests:
    container_name: python_tests
    image: python_tests
    # This should point to the place where this is defined in the dockerfiles
    # If this had an independent Dockerfile, we wouldn't need a target
    build:
      context: ./
      target: python_tests
    # These volumes are useful since all the changes done in
    # the source files will be automatically applied to the built containers
    volumes:
      - ./test:/app
      - ./.env:/app/.env
