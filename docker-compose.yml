version: "3.2"

services:

  postgres:
    container_name: postgres
    image: 'postgres:15'
    # If this condition is met, the container will be considered healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=${HELLO_WORLD_POSTGRES_DB} --username=${HELLO_WORLD_POSTGRES_USER}"]
      interval: 5s
      start_period: 6s
    restart: always  # https://serverfault.com/questions/884759/how-does-restart-always-policy-work-in-docker-compose
    volumes:
      - './postgres/hello_world/data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_PASSWORD=${HELLO_WORLD_POSTGRES_PASSWORD}
      - POSTGRES_USER=${HELLO_WORLD_POSTGRES_USER}
      - POSTGRES_DB=${HELLO_WORLD_POSTGRES_DB}
      - POSTGRES_HOST=${HELLO_WORLD_POSTGRES_HOST}
      - POSTGRES_PORT=${HELLO_WORLD_POSTGRES_PORT}
    # This would let us connect directly without having to connect to the docker container
    # ports:
    #   - '5432:5432'

  postgres_crypto:
    container_name: postgres_crypto
    image: 'postgres:15'
    # If this condition is met, the container will be considered healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=${CRYPTO_POSTGRES_DB} --username=${CRYPTO_POSTGRES_USER}"]
      interval: 5s
      start_period: 6s
    restart: always  # https://serverfault.com/questions/884759/how-does-restart-always-policy-work-in-docker-compose
    volumes:
      - './postgres/crypto/data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_PASSWORD=${CRYPTO_POSTGRES_PASSWORD}
      - POSTGRES_USER=${CRYPTO_POSTGRES_USER}
      - POSTGRES_DB=${CRYPTO_POSTGRES_DB}
      - POSTGRES_HOST=${CRYPTO_POSTGRES_HOST}
      - POSTGRES_PORT=${CRYPTO_POSTGRES_PORT}
    # This would let us connect directly without having to connect to the docker container
    # ports:
    #   - '5432:5432'

  postgres_users:
    container_name: postgres_users
    image: 'postgres:15'
    # If this condition is met, the container will be considered healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname=${USERS_POSTGRES_DB} --username=${USERS_POSTGRES_USER}"]
      interval: 5s
      start_period: 6s
    restart: always  # https://serverfault.com/questions/884759/how-does-restart-always-policy-work-in-docker-compose
    volumes:
      - './postgres/users/data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_PASSWORD=${USERS_POSTGRES_PASSWORD}
      - POSTGRES_USER=${USERS_POSTGRES_USER}
      - POSTGRES_DB=${USERS_POSTGRES_DB}
      - POSTGRES_HOST=${USERS_POSTGRES_HOST}
      - POSTGRES_PORT=${USERS_POSTGRES_PORT}
    # This would let us connect directly without having to connect to the docker container
    # ports:
    #   - '5432:5432'

  # The purpose of this container is just being available to execute go linting and unit testing commands
  go_builder:
    container_name: go_builder
    image: go_builder
    build:
      context: ./
      target: go_builder
    volumes:
      - ./proto:/app/proto
      - ./app/src:/app/src
      - ./app/bin:/app/bin
      - ./.env:/app/.env

  webserver:
    # This container name is really useful to identify the service in the docker network,
    # but in our case, since we are adding replicas for this service, this will make all replicas try
    # to have the same name, which is breaking the docker-compose up command.
    # container_name: webserver
    image: webserver
    # This should point to the place where this is defined in the dockerfiles
    # If this had an independent Dockerfile, we wouldn't need a target
    build:
      context: ./
      target: go_webserver
    command: go run ./src/cmd/webserver/main.go
    # This will make sure this container will wait until postgres
    # container is up and its healthcheck condition is met
    depends_on:
      postgres:
        condition: service_healthy
    # These volumes are useful since all the changes done in
    # the source files will be automatically applied to the built containers
    volumes:
      - ./proto:/app/proto
      - ./app/src:/app/src
      - ./app/bin:/app/bin
      - ./postgres/hello_world/db_migrations:/app/db_migrations
      - ./.env:/app/.env
    # These replicas will allow us to have 2 running containers for this service, this will allow us to test
    # load balancing behaviors.
    deploy:
      replicas: 2
    # This would let us send requests directly without having to connect to the docker container
    # ports:
    #   - "80:8080"

  crypto:
    container_name: crypto
    image: crypto
    # This should point to the place where this is defined in the dockerfiles
    # If this had an independent Dockerfile, we wouldn't need a target
    build:
      context: ./
      target: go_crypto
    command: go run ./src/cmd/crypto/main.go
    # This will make sure this container will wait until postgres_crypto
    # container is up and its healthcheck condition is met
    depends_on:
      postgres_crypto:
        condition: service_healthy
    # These volumes are useful since all the changes done in
    # the source files will be automatically applied to the built containers
    volumes:
      - ./proto:/app/proto
      - ./app/src:/app/src
      - ./app/bin:/app/bin
      - ./postgres/crypto/db_migrations:/app/db_migrations
      - ./.env:/app/.env
    # This would let us send requests directly without having to connect to the docker container
    # ports:
    #   - "80:8080"

  users:
    container_name: users
    image: users
    # This should point to the place where this is defined in the dockerfiles
    # If this had an independent Dockerfile, we wouldn't need a target
    build:
      context: ./
      target: go_users
    command: go run ./src/cmd/users/main.go
    # This will make sure this container will wait until postgres_users
    # container is up and its healthcheck condition is met
    depends_on:
      postgres_users:
        condition: service_healthy
      crypto:
        condition: service_started
    # These volumes are useful since all the changes done in
    # the source files will be automatically applied to the built containers
    volumes:
      - ./proto:/app/proto
      - ./app/src:/app/src
      - ./app/bin:/app/bin
      - ./postgres/users/db_migrations:/app/db_migrations
      - ./.env:/app/.env
    # This would let us send requests directly without having to connect to the docker container
    # ports:
    #   - "80:8080"

  nginx:
    container_name: nginx
    image: nginx_custom
    build:
      context: ./
      target: nginx_custom
    depends_on:
      - "webserver"
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/html/:/usr/share/nginx/html

  python_tests:
    container_name: python_tests
    image: python_tests
    # This should point to the place where this is defined in the dockerfiles
    # If this had an independent Dockerfile, we wouldn't need a target
    build:
      context: ./
      target: python_tests
    # These volumes are useful since all the changes done in
    # the source files will be automatically applied to the built containers
    volumes:
      - ./test:/app
      - ./.env:/app/.env
