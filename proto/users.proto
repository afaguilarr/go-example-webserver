syntax = "proto3";

package go_webserver.users;

option go_package = "github.com/afaguilarr/go-example-webserver/proto";

import "google/protobuf/wrappers.proto";
import "proto/common.proto";

// Users exposes all the necessary RPCs to handle Users information.
service Users {
  // Register receives all necessary information to create a new user,
  // and then returns the stored information.
  rpc Register (RegisterRequest) returns (RegisterResponse) {}
  // LogIn receives a username and a password, and then returns both a JWT access token,
  // and a JWT refresh token.
  rpc LogIn (LogInRequest) returns (LogInResponse) {}
  // Authenticate receives a JWT access token and its username,
  // and verifies if the access token is valid.
  rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse) {}
  // RefreshAccessToken receives and verifies the correctness of a JWT refresh token,
  // and returns a new valid JWT access token.
  rpc RefreshAccessToken (RefreshAccessTokenRequest) returns (RefreshAccessTokenResponse) {}
  // LogOut receives the information of a user, and revokes its refresh token secret, so that a new
  // Login process has to be made in order to create a new refresh token secret.
  rpc LogOut (LogOutRequest) returns (LogOutResponse) {}
}

// The UserInfo message contains the non-sensitive information of the user.
message UserInfo {
    PetMasterInfo pet_master_info = 1; // required
    string username = 2; // required
    google.protobuf.StringValue description = 3;
    go_webserver.common.Image profile_pic = 4;
}

// The PetMasterInfo message contains the information of the PetMaster entity
// that could be or could not be related to a User entity.
message PetMasterInfo {
    string name = 1; // required
    google.protobuf.StringValue contact_number = 2;
    Location location = 3;
}

// The Location message  contains the information of the location of a pet master.
message Location {
    string country = 1; // required
    google.protobuf.StringValue state_or_province = 2;
    google.protobuf.StringValue city_or_municipality = 3;
    google.protobuf.StringValue neighborhood = 4;
    google.protobuf.StringValue zip_code = 5;
}

// The RegisterRequest message contains all necessary information to create a user.
message RegisterRequest {
    UserInfo user_info = 1;
    string password = 2;
}

// The RegisterResponse message contains the information of the stored user (sans password).
message RegisterResponse {
    UserInfo user_info = 1;
}

// The LogInRequest message contains the username and password of the user.
message LogInRequest {
    string username = 1;
    string password = 2;
}

// The LogInResponse message contains the tokens to keep accessing the app.
message LogInResponse {
    string access_token = 1;
    string refresh_token = 2;
}

// The AuthenticateRequest message contains the access token to be verified,
// and the username associated with it.
message AuthenticateRequest {
    string username = 1;
    string access_token = 2;
}

// The AuthenticateResponse message is empty, no errors means the access token is valid.
message AuthenticateResponse {}

// The RefreshAccessTokenRequest message contains the refresh token to be verified,
// and the username associated with it.
message RefreshAccessTokenRequest {
    string username = 1;
    string refresh_token = 2;
}

// The RefreshAccessTokenResponse message contains the new access token.
message RefreshAccessTokenResponse {
    string access_token = 1;
}

// The LogOutRequest message contains the username of the user.
message LogOutRequest {
    string username = 1;
}

// The LogOutResponse message is empty, no errors means the action was successful.
message LogOutResponse {}
